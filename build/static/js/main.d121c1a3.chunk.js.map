{"version":3,"sources":["GuestList/GuestName.js","GuestList/Guest.js","GuestList/PendingGuest.js","GuestList/index.js","Counter/index.js","Header/index.js","App.js","serviceWorker.js","index.js"],"names":["GuestName","props","isEditing","react_default","a","createElement","type","value","children","onChange","handleNameEdits","Guest","GuestList_GuestName","event","setName","target","name","checked","isConfirmed","handleConfirmation","onClick","handleToggleEditing","handleRemove","PendingGuest","className","GuestList","GuestList_PendingGuest","pendingGuest","guests","filter","guest","isFiltered","map","id","GuestList_Guest","key","toggleConfirmation","toggleEditing","text","removeGuest","Counter","numberAttending","numberUnconfirmed","totalInvited","Proptypes","number","Header","onSubmit","newGuestSubmitHandler","handleNameInput","placeholder","App","state","lastGuestId","newGuestId","_this","toggleGuestProperty","property","setState","Object","objectSpread","defineProperty","idToChange","toggleEditingn","toggleFilter","preventDefault","concat","toConsumableArray","getTotalInvited","length","getAttendingGuests","reduce","total","this","src_Header","src_Counter","src_GuestList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d121c1a3.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst GuestName = props => {\n  if (props.isEditing) {\n    return (\n      <input type='text'\n        value={props.children} \n          onChange={props.handleNameEdits}\n        />\n    );\n  }\n\n  return (\n    <span>\n      {props.children}\n    </span>\n  )\n}\n\n\n\nGuestName.propTypes = {\n\n  isEditing: PropTypes.bool.isRequired,\n  handleNameEdits: PropTypes.func.isRequired\n\n}\n\nexport default GuestName;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport GuestName from './GuestName';\n\nconst Guest = props =>\n\n  <li>\n    <GuestName isEditing={props.isEditing}\n    handleNameEdits={event => props.setName(event.target.value)}>\n    {props.name}</GuestName>\n    <label>\n      <input type=\"checkbox\"\n        checked={props.isConfirmed}\n        onChange={props.handleConfirmation} /> Confirmed\n        </label>\n    <button onClick={props.handleToggleEditing}>\n    {props.isEditing ? \"save\" : \"edit\"}\n    </button>\n    <button onClick={props.handleRemove}>remove</button>\n  </li>\n\n\nGuest.propTypes = {\n  name: PropTypes.string.isRequired,\n  isConfirmed: PropTypes.bool.isRequired,\n  isEditing: PropTypes.bool.isRequired,\n  handleConfirmation: PropTypes.func.isRequired,\n  handleToggleEditing: PropTypes.func.isRequired,\n  setName: PropTypes.func.isRequired,\n  handleRemove: PropTypes.func.isRequired\n}\n\nexport default Guest;","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst PendingGuest = props => {\n  if(props.name) {\n    return (\n  <li className=\"pending\">\n    <span>\n    {props.name}\n    </span>\n  </li>\n\n    )\n  }\n  return null;\n\n}\n\n\nPendingGuest.propTypes = {\n  name: PropTypes.string.isRequired\n}\n\nexport default PendingGuest;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Guest from './Guest';\nimport PendingGuest from './PendingGuest';\n\nconst GuestList = props =>\n  <ul>\n    <PendingGuest name={props.pendingGuest} />\n    {props.guests\n    .filter(guest => !props.isFiltered || guest.isConfirmed)\n    .map((guest, id) =>\n      <Guest\n        key={id}\n        name={guest.name}\n        isConfirmed={guest.isConfirmed}\n        isEditing={guest.isEditing}\n        handleConfirmation={ () => props.toggleConfirmation(guest.id)}\n        handleToggleEditing={() => props.toggleEditing(id.guest.id)}\n        setName ={(text) => props.setName(text, guest.id)}\n        handleRemove={() => props.removeGuest(guest.id)}\n      />\n    )}\n\n  </ul>\n\nGuestList.propTypes = {\n  guests: PropTypes.array.isRequired,\n  toggleConfirmation: PropTypes.func.isRequired,\n  toggleEditing: PropTypes.func.isRequired,\n  setName: PropTypes.func.isRequired,\n  isFiltered: PropTypes.bool.isRequired,\n  removeGuest: PropTypes.func.isRequired,\n  pendingGuest: PropTypes.string.isRequired\n}\n\nexport default GuestList;","// Counter displays the stats for number attending, unconfirmed, and total guests\n\nimport React from 'react';\nimport Proptypes from 'prop-types';\n\nconst Counter = props => \n  <table className=\"counter\">\n  <tbody>\n    <tr>\n      <td>Attending:</td>\n      <td>{props.numberAttending}</td>\n    </tr>\n    <tr>\n      <td>Unconfirmed:</td>\n      <td>{props.numberUnconfirmed}</td>\n    </tr>\n    <tr>\n      <td>Total:</td>\n      <td>{props.totalInvited}</td>\n    </tr>\n  </tbody>\n</table>\n\nCounter.Proptypes = {\n  numberAttending: Proptypes.number,\n  numberUnconfirmed: Proptypes.number,\n  totalInvited: Proptypes.number\n}\n\nexport default Counter;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = (props) =>\n  <header>\n    <h1>RSVP</h1>\n    <p>A Simple RSVP Tracker</p>\n    <form onSubmit={props.newGuestSubmitHandler}>\n      <input type=\"text\"\n        onChange={props.handleNameInput}\n        value={props.pendingGuest}\n        placeholder=\"Invite Someone\" />\n      <button type=\"submit\" name=\"submit\" value=\"submit\">Submit</button>\n    </form>\n  </header>;\n\nHeader.propTypes = {\n  newGuestSubmitHandler: PropTypes.func.isRequired,\n  pendingGuest: PropTypes.string.isRequired,\n  handleNameInput: PropTypes.func.isRequired\n}\n\n\nexport default Header;","import React, { Component } from 'react';\nimport './App.css';\nimport GuestList from './GuestList';\nimport Counter from './Counter';\nimport Header from './Header';\n\n\nclass App extends Component {\n\n  state = {\n    isFiltered: false,\n    pendingGuest: \"\",\n    guests: []\n  }\n\nlastGuestId = 0;\n\nnewGuestId = ()=> {\n  const id = this.lastGuestId;\n  this.lastGuestId += 1;\n  return id;\n}\n\n  toggleGuestProperty = (property, id) => {\n    this.setState({\n      guests: this.state.guests.map((guest) => {\n        if (id === guest.id) {\n          return {\n            ...guest,\n            [property]: !guest[property]\n          }\n        }\n        return guest;\n      })\n    })\n  }\n\n  setName = (name, idToChange) => {\n    this.setState({\n      guests: this.state.guests.map((guest, id) => {\n        if (id === idToChange) {\n          return {\n            ...guest,\n            name\n          }\n        }\n        return guest;\n      })\n    })\n  }\n\n  toggleConfirmation = id =>\n    this.toggleGuestProperty(\"isConfirmed\", id);\n\n  removeGuest = id =>\n    this.setState({\n      guests: this.state.guests.filter(guest => id !== guest.id)\n    });\n\n\n  toggleEditingn = id =>\n    this.toggleGuestProperty(\"isEditing\", id);\n\n  toggleFilter = () =>\n    this.setState({ isFiltered: !this.state.isFiltered });\n\n  handleNameInput = (event) =>\n    this.setState({ pendingGuest: event.target.value });\n\n  newGuestSubmitHandler = (event) => {\n    event.preventDefault();\n    const id = this.newGuestId();\n    this.setState({\n      guests: [\n        {\n          name: this.state.pendingGuest,\n          isConfirmed: false,\n          isEditing: false,\n          id\n        },\n        ...this.state.guests\n      ],\n      pendingGuest: ''\n    })\n  }\n\n\n  // get the total number of invited guests\n  getTotalInvited = () => this.state.guests.length;\n\n  getAttendingGuests = () =>\n    this.state.guests.reduce((total, guest) => guest.isConfirmed ? total + 1 : total, 0);\n\n  render() {\n    const totalInvited = this.getTotalInvited();\n    const numberAttending = this.getAttendingGuests();\n    const numberUnconfirmed = totalInvited - numberAttending;\n    return (\n      <div className=\"App\">\n        <Header newGuestSubmitHandler = {this.newGuestSubmitHandler}\n          handleNameInput = {this.handleNameInput}\n          pendingGuest = {this.state.pendingGuest}\n\n        />\n        <div className=\"main\">\n          <div>\n            <h2>Invitees</h2>\n            <label>\n              <input\n                type=\"checkbox\"\n                onChange={this.toggleFilter}\n                checked={this.state.isFiltered}\n              /> Hide those who haven't responded\n          </label>\n          </div>\n\n          <Counter\n            totalInvited={totalInvited}\n            numberAttending={numberAttending}\n            numberUnconfirmed={numberUnconfirmed}\n          />\n\n          <GuestList guests={this.state.guests}\n            toggleConfirmation={this.toggleConfirmation}\n            toggleEditing={this.toggleEditingn}\n            setName={this.setName}\n            isFiltered={this.state.isFiltered}\n            removeGuest={this.removeGuest}\n            pendingGuest={this.state.pendingGuest}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}